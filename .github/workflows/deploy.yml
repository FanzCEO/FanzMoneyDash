name: Deploy FANZ MoneyDash to DigitalOcean

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
    types: [closed]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        npm audit --audit-level=high --production
        
    - name: Check for known vulnerabilities in dependencies
      run: |
        # Install audit-ci for more detailed security checking
        npm install -g audit-ci
        audit-ci --moderate

    - name: Build application
      run: npm run build --if-present

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/production' && 'https://money.fanz.network' || 'https://money-staging.fanz.network' }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Build Docker image
      run: |
        docker build -f deploy/Dockerfile.production -t fanz-money-dash:${{ github.sha }} .
        docker tag fanz-money-dash:${{ github.sha }} fanz-money-dash:latest

    - name: Configure DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}

    - name: Push to DigitalOcean Container Registry
      run: |
        doctl registry login
        docker tag fanz-money-dash:latest registry.digitalocean.com/fanz-registry/money-dash:latest
        docker tag fanz-money-dash:latest registry.digitalocean.com/fanz-registry/money-dash:${{ github.sha }}
        docker push registry.digitalocean.com/fanz-registry/money-dash:latest
        docker push registry.digitalocean.com/fanz-registry/money-dash:${{ github.sha }}

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd /opt/fanz-money-dash

          # Pull latest images
          doctl registry login
          docker-compose -f docker-compose.production.yml pull

          # Create backup of current deployment
          docker-compose -f docker-compose.production.yml exec mongodb mongodump --out /backup/$(date +%Y%m%d_%H%M%S) || true

          # Deploy with zero downtime
          docker-compose -f docker-compose.production.yml up -d --remove-orphans

          # Health check
          sleep 30
          curl -f http://localhost:3001/health || exit 1

          # Cleanup old images
          docker system prune -f
          
          # Log deployment
          echo "Deployment completed at $(date)" >> deployment.log

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful to ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}"
        else
          echo "❌ Deployment failed"
        fi

    - name: Update deployment status
      if: github.ref == 'refs/heads/production'
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target-url: https://money.fanz.network
        environment: production
        state: ${{ job.status == 'success' && 'success' || 'failure' }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && needs.deploy.result == 'failure'
    needs: deploy
    
    steps:
    - name: Rollback deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          cd /opt/fanz-money-dash
          
          # Get previous working image
          PREVIOUS_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep money-dash | sed -n '2p')
          
          if [ ! -z "$PREVIOUS_IMAGE" ]; then
            # Rollback to previous image
            sed -i "s|registry.digitalocean.com/fanz-registry/money-dash:latest|$PREVIOUS_IMAGE|g" docker-compose.production.yml
            docker-compose -f docker-compose.production.yml up -d
            echo "Rollback completed to $PREVIOUS_IMAGE"
          else
            echo "No previous image found for rollback"
          fi

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Docker security scan
      run: |
        docker build -f deploy/Dockerfile.production -t security-scan .
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image security-scan

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application for testing
      run: |
        npm start &
        sleep 10

    - name: Run performance tests
      run: |
        # Install k6 for performance testing
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

        # Run basic performance test
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        export default function () {
          http.get('http://localhost:3001/health');
        }
        EOF