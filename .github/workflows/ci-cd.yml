name: 🚀 CI/CD Pipeline - FanzMoneyDash

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: fanzceo/fanzmoneydash

jobs:
  # Code Quality & Security Checks
  quality-checks:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 🧹 Lint Code
        run: npm run lint

      - name: 🎨 Check Code Format
        run: npm run format:check

      - name: 🔒 Security Audit
        run: npm audit --audit-level=high

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit & Integration Tests
  tests:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: fanzmoneydash_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 🗄️ Run Database Migrations
        run: npm run migrate
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/fanzmoneydash_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: npm run test:${{ matrix.test-type }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/fanzmoneydash_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          ENCRYPTION_KEY: test-encryption-key-32-bytes-long

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build & Package
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    
    outputs:
      image: ${{ steps.build.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 🏗️ Build Application
        run: npm run build

      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package*.json
            Dockerfile
          retention-days: 7

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Load Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🚀 Start Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: ⚡ Run Performance Tests
        run: k6 run --vus 50 --duration 5m tests/performance/load-test.js

      - name: 🧹 Cleanup Test Environment
        run: docker-compose -f docker-compose.test.yml down

  # Security Scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, tests, performance]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging-api.fanz.network
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🚀 Deploy to ECS Staging
        run: |
          aws ecs update-service \
            --cluster fanzmoneydash-staging \
            --service fanzmoneydash-api \
            --force-new-deployment

      - name: ✅ Verify Deployment
        run: |
          sleep 60
          curl -f https://staging-api.fanz.network/health || exit 1

      - name: 🔔 Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, tests, performance, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://api.fanz.network
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🚀 Deploy to ECS Production
        run: |
          aws ecs update-service \
            --cluster fanzmoneydash-production \
            --service fanzmoneydash-api \
            --force-new-deployment

      - name: ⏳ Wait for Deployment
        run: |
          aws ecs wait services-stable \
            --cluster fanzmoneydash-production \
            --services fanzmoneydash-api

      - name: ✅ Verify Deployment
        run: |
          curl -f https://api.fanz.network/health || exit 1

      - name: 📊 Run Post-Deployment Tests
        run: |
          npm ci --no-audit
          npm run test:smoke

      - name: 🔔 Notify Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚀 FanzMoneyDash successfully deployed to production!'

      - name: 🚨 Notify Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '❌ FanzMoneyDash production deployment failed!'

  # Release Management
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏷️ Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Update Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `${{ steps.changelog.outputs.changelog }}
              
              ## Docker Image
              \`\`\`bash
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              \`\`\`
              
              ## Deployment
              This release has been automatically deployed to production.
              - API: https://api.fanz.network
              - Health: https://api.fanz.network/health
              - Docs: https://docs.fanz.network/moneydash`
            });

      - name: 📬 Notify Stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🎉 New FanzMoneyDash release: ${{ github.ref_name }}
            
            🚀 **What's New:**
            ${{ steps.changelog.outputs.changelog }}
            
            📊 **Metrics:**
            - Build Time: ${{ github.run_time }}
            - Tests Passed: ✅
            - Security Scan: ✅
            - Performance: ✅