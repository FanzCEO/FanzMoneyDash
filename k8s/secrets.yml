apiVersion: v1
kind: Secret
metadata:
  name: fanzmoneydash-secrets
  namespace: fanz-production
  labels:
    app: fanzmoneydash-api
type: Opaque
stringData:
  # Database Configuration
  database-url: "postgresql://USERNAME:PASSWORD@postgres-service:5432/fanzmoneydash"
  redis-url: "redis://redis-service:6379"
  
  # Security Keys (Generate with: openssl rand -base64 32)
  jwt-secret: "REPLACE_WITH_ACTUAL_JWT_SECRET_BASE64"
  api-key-secret: "REPLACE_WITH_ACTUAL_API_KEY_SECRET_BASE64"
  encryption-key: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY_32_BYTES"
  hmac-secret: "REPLACE_WITH_ACTUAL_HMAC_SECRET_BASE64"
  
  # Payment Processors
  rocketgate-api-key: "REPLACE_WITH_ROCKETGATE_API_KEY"
  rocketgate-api-secret: "REPLACE_WITH_ROCKETGATE_API_SECRET"
  segpay-api-key: "REPLACE_WITH_SEGPAY_API_KEY"
  ccbill-api-key: "REPLACE_WITH_CCBILL_API_KEY"
  bitpay-api-token: "REPLACE_WITH_BITPAY_API_TOKEN"
  
  # Payout Providers
  paxum-api-key: "REPLACE_WITH_PAXUM_API_KEY"
  wise-api-token: "REPLACE_WITH_WISE_API_TOKEN"
  payoneer-api-key: "REPLACE_WITH_PAYONEER_API_KEY"
  
  # Monitoring & Observability
  sentry-dsn: "REPLACE_WITH_SENTRY_DSN"
  datadog-api-key: "REPLACE_WITH_DATADOG_API_KEY"
  
  # Communication Services
  twilio-account-sid: "REPLACE_WITH_TWILIO_ACCOUNT_SID"
  twilio-auth-token: "REPLACE_WITH_TWILIO_AUTH_TOKEN"
  sendgrid-api-key: "REPLACE_WITH_SENDGRID_API_KEY"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fanzmoneydash-config
  namespace: fanz-production
  labels:
    app: fanzmoneydash-api
data:
  # Application Configuration
  node-env: "production"
  port: "3000"
  log-level: "info"
  
  # External Service URLs
  sentry-dsn: "https://your-sentry-dsn@sentry.io/project-id"
  
  # Rate Limiting
  rate-limit-window: "900000"  # 15 minutes
  rate-limit-max: "1000"
  
  # Security Configuration
  session-timeout: "3600000"  # 1 hour
  max-login-attempts: "5"
  lockout-duration: "1800000"  # 30 minutes
  
  # Transaction Configuration
  default-currency: "USD"
  max-transaction-amount: "10000.00"
  min-payout-amount: "20.00"
  
  # Audit Configuration
  audit-retention-days: "2555"  # 7 years
  log-retention-days: "90"
  
  # Performance Tuning
  database-pool-size: "20"
  redis-pool-size: "10"
  worker-concurrency: "4"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fanzmoneydash-service-account
  namespace: fanz-production
  labels:
    app: fanzmoneydash-api

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: fanz-production
  name: fanzmoneydash-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fanzmoneydash-rolebinding
  namespace: fanz-production
subjects:
- kind: ServiceAccount
  name: fanzmoneydash-service-account
  namespace: fanz-production
roleRef:
  kind: Role
  name: fanzmoneydash-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanzmoneydash-network-policy
  namespace: fanz-production
spec:
  podSelector:
    matchLabels:
      app: fanzmoneydash-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all external traffic for payment processors
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80