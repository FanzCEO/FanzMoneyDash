apiVersion: apps/v1
kind: Deployment
metadata:
  name: fanzmoneydash-api
  namespace: fanz-production
  labels:
    app: fanzmoneydash-api
    version: v1
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fanzmoneydash-api
  template:
    metadata:
      labels:
        app: fanzmoneydash-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fanzmoneydash-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: fanzmoneydash-api
        image: ghcr.io/fanzceo/fanzmoneydash:latest
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: jwt-secret
        - name: API_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: api-key-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: encryption-key
        - name: HMAC_SECRET
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: hmac-secret
        - name: SENTRY_DSN
          valueFrom:
            configMapKeyRef:
              name: fanzmoneydash-config
              key: sentry-dsn
        - name: DATADOG_API_KEY
          valueFrom:
            secretKeyRef:
              name: fanzmoneydash-secrets
              key: datadog-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: temp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: temp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      nodeSelector:
        node-type: compute
      tolerations:
      - key: "compute-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fanzmoneydash-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: fanzmoneydash-api-service
  namespace: fanz-production
  labels:
    app: fanzmoneydash-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: fanzmoneydash-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanzmoneydash-api-ingress
  namespace: fanz-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://dash.fanz.network,https://api.fanz.network"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - api.fanz.network
    secretName: fanzmoneydash-api-tls
  rules:
  - host: api.fanz.network
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanzmoneydash-api-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fanzmoneydash-api-hpa
  namespace: fanz-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fanzmoneydash-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60