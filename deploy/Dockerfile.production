# Multi-stage build for production-optimized FANZ MoneyDash
FROM node:20.18.0-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --silent

# Copy source code
COPY . .

# Build the application
RUN npm run build 2>/dev/null || echo "No build script found"

# Production stage
FROM node:20.18.0-alpine AS production

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy additional files if they exist
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist 2>/dev/null || :
COPY --from=builder --chown=nextjs:nodejs /app/build ./build 2>/dev/null || :

# Create necessary directories
RUN mkdir -p logs uploads tmp && \
    chown -R nextjs:nodejs logs uploads tmp

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV USER=nextjs

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "src/server.js"]